{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Material Template","text":"<p>This is a template repository for anyone that wants to use the MkDocs Material Theme.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started, first clone this template by clicking on the Green button labeled <code>Use this template</code>. On the new screen, give your repository a name and make sure to check <code>Include all branches</code>. This will make sure that the <code>gh-pages</code> branch is included, or otherwhise publishing the docs to GitHub Pages could cause errors (See Troubleshooting).</p>"},{"location":"#creating-pages","title":"Creating pages","text":"<p>To create new pages, just add new markdown files to the docs folder of the repository and edit them. MkDocs will then turn those into static HTML pages once you build or deploy the pages.</p> <p>The template also has some pre-made settings for you to help you with creating documentation much easier. In the mkdocs.yml will you find many settings that you can alter. Please check the comments and the links they have for more info.</p> <p>It also contains some extensions that might be useful including:</p> <ul> <li>Admonition</li> <li>CodeHilite</li> <li>ToC</li> <li>PyMdown Extensions</li> </ul> <p>You're free to add, edit or remove any extension at your own discretion, but keep in mind that some expansions might caus compatibility issues with others.</p>"},{"location":"#build-pages","title":"Build Pages","text":"<p>To build pages (locally) can you use the <code>mkdocs build</code> command in your prefered command prompt. Note that for the successful execution of this command you have to...</p> <ul> <li>...be in the folder that contains the <code>mkdocs.yml</code></li> <li>...have Python 3.7 installed</li> <li>...have MkDocs and all required dependencies such as Material for MkDocs installed. Note that Material for MkDocs automatically downloads MkDocs and also certain extensions such as the PyMdown Extensions.</li> </ul> <p>MkDocs would now build the HTML in the defined configuration folder for you to use.</p>"},{"location":"#deploy-to-github","title":"Deploy to GitHub","text":"<p>If you want to publish the pages on GitHub Pages can you use the premade workflow for this. This workflow will setup Python, download Material for MkDocs and all its dependencies and deploy the pages to the <code>gh-pages</code> branch to then be viewable under <code>&lt;username&gt;.github.io/&lt;repository&gt;</code> (unless you defined a specific CNAME through a CNAME file in the docs folder).</p> <p>Note that in order for this to work will you need to have a <code>gh-pages</code> branch already made.</p>"},{"location":"#netlify","title":"Netlify","text":"<p>Netlify is an amazing service to build and deploy pages. This template comes with a <code>runtime.txt</code> which is used by Netlify to determine the Python version used (They use an old version of Python... Don't ask why).</p> <p>For more information, please check out their website.</p>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>The deploy action gives me an error when deploying. What is the issue?</p> <p>There can be many issues but the most common ones are that you either don't have a <code>gh-pages</code> branch set or that the <code>requirements.txt</code> file is missing or its content is invalid.</p> <p>Can I alter the overall style of the pages?</p> <p>Yes. Material for MkDocs supports Theme extensions, meaning you can override specific parts of a theme by providing the particula file in a folder and defining this folder as the <code>custom_dir</code> one in the mkdocs.yml. This template ships with a <code>theme</code> folder that can be used for that and you can just uncomment the aforementioned line in the YAML file.</p>"},{"location":"#dependabot","title":"Dependabot","text":"<p>The repository contains a <code>dependabot.yml</code> file inside the <code>.github</code> folder which allows automatic updates through GitHub's Dependabot. It is configured to target both Python dependencies (inside the <code>requirements.txt</code>) and GitHub Actions dependencies, to make sure bot are updated accordingly.</p> <p>Note that it is configured by default to add the <code>Type: Update (Dependency)</code> label and also the <code>Target: Python (pip)</code> label for Python and <code>Target: GitHub Actions</code> label for GitHub Actions Dependencies. Those labels don't exist by default so you have to either create them, or alter the ones in the dependabot.yml (You can also just remove the <code>labels</code> sections).</p>"},{"location":"#credits","title":"Credits","text":"<p>A big thank you goes to the following people/groups:</p> <ul> <li>MkDocs for providing the software, to generate documentation.</li> <li>squidfunk for the MkDocs Material Theme.</li> <li>facelessuser for the PyMdown Extensions.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This template is served under the MIT license. Read the LICENSE file for more info.</p>"},{"location":"MkDocs/","title":"Gu\u00eda para un sitio web de documentaci\u00f3n con MkDocs Material y GitHub Pages","text":"","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#introduccion-al-proyecto","title":"Introducci\u00f3n al proyecto","text":"<p>Este documento detalla una gu\u00eda paso a paso para la creaci\u00f3n y publicaci\u00f3n de un sitio web de documentaci\u00f3n y blog utilizando MkDocs Material. La idea es que se pueda publicar de manera gratuita en GitHub Pages con SSL (HTTPS) y, lo m\u00e1s importante, que se configure un pipeline de Integraci\u00f3n Continua/Despliegue Continuo (CI/CD) para automatizar las actualizaciones.</p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#requisitos-previos","title":"Requisitos previos","text":"<p>Antes de arrancar, se necesitan un par de herramientas instaladas: * Python: Es el \u00fanico requisito principal, ya que MkDocs es una biblioteca de Python. * VS Code: Si bien no es obligatorio, facilita mucho la edici\u00f3n de los archivos Markdown y la ejecuci\u00f3n de comandos en la terminal integrada.</p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#pasos-para-la-configuracion-y-el-despliegue","title":"Pasos para la configuraci\u00f3n y el despliegue","text":"<p>Aqu\u00ed est\u00e1n los pasos para levantar el sitio, configurarlo, y publicarlo usando Git y GitHub Actions.</p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#1-configuracion-inicial-del-proyecto","title":"1. Configuraci\u00f3n inicial del proyecto","text":"<p>Primero, hay que armar la estructura inicial. 1.  Crear la carpeta del proyecto: Hac\u00e9 una nueva carpeta y abrila en VS Code. 2.  Crear y activar un entorno virtual: Esto a\u00edsla las dependencias del proyecto.     * <code>python -m venv virtual_environment</code>     * Para activarlo en Windows: <code>virtual_environment\\Scripts\\activate</code></p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#2-instalacion-y-creacion-del-sitio","title":"2. Instalaci\u00f3n y creaci\u00f3n del sitio","text":"<p>Una vez que ten\u00e9s el entorno listo, instalamos MkDocs y creamos el sitio. 1.  Instalar MkDocs Material: <code>pip install mkdocs-material</code> 2.  Iniciar un nuevo proyecto: <code>mkdocs new .</code> 3.  Servir el sitio web localmente: Con este comando pod\u00e9s ver el sitio en tu navegador mientras lo vas armando. <code>mkdocs serve</code></p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#3-configuracion-y-personalizacion-del-sitio","title":"3. Configuraci\u00f3n y personalizaci\u00f3n del sitio","text":"<p>El archivo clave para esto es <code>mkdocs.yml</code>, donde se configura todo, desde el tema hasta los plugins. * A\u00f1adir el tema Material: Ten\u00e9s que especificar el tema en el archivo.     <code>yaml     theme:       name: material</code> * Configurar la navegaci\u00f3n y las p\u00e1ginas: Se definen la estructura de los men\u00fas y las p\u00e1ginas. Cre\u00e1 los archivos <code>.md</code> en la carpeta <code>docs/</code> y organizalos en la secci\u00f3n <code>nav</code> del <code>mkdocs.yml</code>. * A\u00f1adir funcionalidades: Se activan caracter\u00edsticas como b\u00fasqueda, modo oscuro/claro y la opci\u00f3n de copiar c\u00f3digo. * Configurar los plugins: Los plugins son fundamentales para funcionalidades como las etiquetas (<code>tags</code>), el blog y el resaltado de c\u00f3digo.</p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#4-control-de-versiones-y-publicacion","title":"4. Control de versiones y publicaci\u00f3n","text":"<p>Para publicar el sitio en GitHub Pages, ten\u00e9s que usar Git. 1.  Inicializar un repositorio Git: <code>git init</code> 2.  Crear un archivo <code>.gitignore</code>: Esto es importante para no subir archivos innecesarios. <code>virtual_environment/</code> y <code>site/</code> son los m\u00e1s comunes. 3.  Hacer el primer commit:     * <code>git add .</code>     * <code>git commit -m \"Initial commit\"</code> 4.  Publicar en GitHub: Cre\u00e1 un repositorio en GitHub y sub\u00ed tu c\u00f3digo.</p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#5-configuracion-del-pipeline-cicd-con-github-actions","title":"5. Configuraci\u00f3n del pipeline CI/CD con GitHub Actions","text":"<p>Este es el paso m\u00e1gico que automatiza el despliegue. 1.  Configurar GitHub Pages: En la configuraci\u00f3n de tu repositorio en GitHub, eleg\u00ed GitHub Actions como fuente de despliegue. 2.  Crear el archivo de workflow: En la carpeta <code>.github/workflows/</code>, cre\u00e1 un archivo YAML (por ejemplo, <code>ci.yml</code>). Este archivo va a definir las acciones autom\u00e1ticas, como construir el sitio (<code>mkdocs build</code>) y desplegarlo. 3.  Realizar el commit y el push del workflow: Sub\u00ed el archivo <code>ci.yml</code> a tu repositorio. Esto va a disparar la primera ejecuci\u00f3n del <code>pipeline</code> y tu sitio se publicar\u00e1.</p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]},{"location":"MkDocs/#6-verificacion-y-actualizacion-automatica","title":"6. Verificaci\u00f3n y actualizaci\u00f3n autom\u00e1tica","text":"<p>Una vez que el <code>pipeline</code> de GitHub Actions termine, tu sitio va a estar en l\u00ednea. Cada vez que hagas un <code>git push</code>, los cambios se van a reflejar autom\u00e1ticamente en tu sitio p\u00fablico en cuesti\u00f3n de minutos, sin que tengas que hacer nada m\u00e1s.</p> <p>Esta es una manera muy eficiente de mantener un sitio de documentaci\u00f3n siempre actualizado.</p>","tags":["mkdocs","github","ci/cd","documentaci\u00f3n","despliegue","tutorial"]}]}